import Product from "../mongodb/models/product.js";import Store from "../mongodb/models/store.js";const getAllProducts = async (req, res) => {    try {        const storeId = req.params.store;        const store = await Store.findById(storeId);        if (!store) {            return res.status(404).json({message: 'Store not found'});        }        const products = await Product.find({store: {_id: storeId}})?.populate('store')        if(products) {            return res.status(200).json(products)        } else {            return res.status(200).json([])        }    } catch (error) {        res.status(500).json({message: error.message})    }}const getProductDetail = async (req, res) => {    try {        const productId = req.params.id        const product = await Product.findById(productId)?.populate('store')        if(product) {            return res.status(200).json(product)        } else {            return res.status(404).json({message: 'Product not found'});        }    } catch (error) {        res.status(500).json({message: error.message})    }}const createProduct = async (req, res) => {    try {    const storeId = req.params.store    const {name, description, status} = req.body    const store = await Store.findById(storeId);    if (!store) {        return res.status(404).json({message: 'Store not found'});    }    const storeProducts = await Product.find({store: {_id: storeId}})        if(storeProducts?.find(product => product.name === name)) {            return res.status(404).json({message: 'Product already exists'});        } else {            const newProduct = await Product.create({                name,                description,                status,                store            })            res.status(200).json(newProduct)        }    } catch (error) {        res.status(500).json({message: error.message})    }}const updateProduct = async (req, res) => {    try {        const productId = req.params.id        const updatedProduct = await Product.findByIdAndUpdate(productId, req.body, { new: true })?.populate('store');        if(updatedProduct) {            return res.status(200).json(updatedProduct)        } else {            return res.status(404).json({message: 'Product not found'});        }    } catch (error) {        res.status(500).json({message: error.message})    }}const deleteProduct = async (req, res) => {    try {        const productId = req.params.id        const deletedProduct = await Product.findByIdAndDelete(productId);        if(deletedProduct) {            return res.status(200).json({ message: 'Product deleted successfully' });        } else {            return res.status(404).json({ message: 'Product not found' });        }    } catch (error) {        res.status(500).json({message: error.message})    }}export {    getAllProducts,    getProductDetail,    createProduct,    updateProduct,    deleteProduct}